// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.vanderbilt.drumbeat.domain;

import edu.vanderbilt.drumbeat.domain.Audio;
import edu.vanderbilt.drumbeat.domain.AudioDataOnDemand;
import edu.vanderbilt.drumbeat.domain.PersonDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AudioDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AudioDataOnDemand: @Component;
    
    private Random AudioDataOnDemand.rnd = new SecureRandom();
    
    private List<Audio> AudioDataOnDemand.data;
    
    @Autowired
    private PersonDataOnDemand AudioDataOnDemand.personDataOnDemand;
    
    public Audio AudioDataOnDemand.getNewTransientAudio(int index) {
        Audio obj = new Audio();
        setDuration(obj, index);
        setFrames(obj, index);
        setFramesize(obj, index);
        setPathurl(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void AudioDataOnDemand.setDuration(Audio obj, int index) {
        int duration = index;
        if (duration < 1) {
            duration = 1;
        }
        obj.setDuration(duration);
    }
    
    public void AudioDataOnDemand.setFrames(Audio obj, int index) {
        int frames = index;
        if (frames < 1) {
            frames = 1;
        }
        obj.setFrames(frames);
    }
    
    public void AudioDataOnDemand.setFramesize(Audio obj, int index) {
        int framesize = index;
        if (framesize < 2) {
            framesize = 2;
        }
        obj.setFramesize(framesize);
    }
    
    public void AudioDataOnDemand.setPathurl(Audio obj, int index) {
        String pathurl = "pathurl_" + index;
        obj.setPathurl(pathurl);
    }
    
    public void AudioDataOnDemand.setTitle(Audio obj, int index) {
        String title = "title_" + index;
        obj.setTitle(title);
    }
    
    public Audio AudioDataOnDemand.getSpecificAudio(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Audio obj = data.get(index);
        Long id = obj.getId();
        return Audio.findAudio(id);
    }
    
    public Audio AudioDataOnDemand.getRandomAudio() {
        init();
        Audio obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Audio.findAudio(id);
    }
    
    public boolean AudioDataOnDemand.modifyAudio(Audio obj) {
        return false;
    }
    
    public void AudioDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Audio.findAudioEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Audio' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Audio>();
        for (int i = 0; i < 10; i++) {
            Audio obj = getNewTransientAudio(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
